name: Build and Publish

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

concurrency:
  group: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  release:
    name: Build and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.REPO_PUSH_KEY }}

      - name: Read Node.js version from .nvmrc file
        run: |
          NODE_VERSION=$(cat .nvmrc)
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Print Environment Info
        run: npx nx report

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

#      - name: Check formatting
#        run: npx nx format:check
#
#      - name: Lint affected
#        run: npx nx affected -t lint
#
#      - name: Test affected
#        run: npx nx affected -t test
#
#      - name: E2E affected
#        run: npx nx affected -t e2e

      - name: Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -x

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          projects=$(npx nx show projects --affected --base=$NX_BASE --head=$NX_HEAD --exclude="*-e2e")

          npx nx release --skip-publish

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Drop existing PR releases
            releases=$(echo $(gh release list --limit 1000) | awk '{print $1}' | grep -E "^.*/PR-${{ github.event.pull_request.number }}-SHA-")
            for release in $releases; do
              gh release delete "$release" --cleanup-tag --yes
            done
          fi

          for project in $projects
          do
            version=$(grep '"version"' apps/"$project"/"$project"/package.json | awk -F '"' '{print $4}')
            if [ -z "$version" ]; then
              echo "Error: Could not read version from $project/package.json"
              exit 1
            fi

            npx nx build $project

            if [ "${{ github.event_name }}" != "pull_request" ]; then
              # Publish a stable release
              zip -r "./dist/apps/$project/$project/$project-$version.zip" -j ./dist/apps/"$project"/"$project"/browser
              gh release create release/"$project"/"$version" "./dist/apps/$project/$project/$project-$version.zip" -t=release/"$project"/"$version"
            else
              # Publish a pre-release with SHA
              shortSHA=$(echo "${{ github.event.pull_request.head.sha }}" | awk '{print substr($0,1,8)}')
              suffix=PR-${{ github.event.pull_request.number }}-SHA-"$shortSHA"
              pushd ./dist/apps/"$project"/"$project"/browser
              npm version $version-$suffix
              popd
              zip -r "./dist/apps/$project/$project/$project-$suffix.zip" -j ./dist/apps/"$project"/"$project"/browser
              gh release create "$project/$suffix" "./dist/apps/$project/$project/$project-$suffix.zip" -t=$project/$suffix --prerelease
            fi
          done

          if [ "${{ github.event_name }}" != "pull_request" ]; then
            if [[ -n $(git status --porcelain) ]]; then
              git commit -m "chore(release): release [skip ci]"
              git push
              git push --tags
            fi
          fi
